from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, Chat, CallbackQuery
from helpers.decorators import authorized_users_only
from config import BOT_NAME, BOT_USERNAME, OWNER_USERNAME, GROUP_SUPPORT, UPDATES_CHANNEL, ASSISTANT_NAME, OWNER_USERNAME
from handlers.play import cb_admin_check


@Client.on_callback_query(filters.regex("cbstart"))
async def cbstart(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>‚ú® P…™·¥ã·¥Ä P…™·¥ã·¥Ä, W·¥á ü·¥Ñ·¥è·¥ç·¥á</b> {query.from_user.mention}!\n\nüí≠ [{BOT_NAME}](t.me/{UPDATES_CHANNEL}) <b>A ü ü·¥è·¥°s Y·¥è·¥ú T·¥è P ü·¥Ä è M·¥ús…™·¥Ñ O…¥ G Ä·¥è·¥ú·¥òs T ú Ä·¥è·¥ú…¢ ú T ú·¥á N·¥á·¥° T·¥á ü·¥á…¢ Ä·¥Ä·¥ç's V·¥è…™·¥Ñ·¥á C ú·¥Ä·¥õs!</b>\n\nüí° <b>F…™…¥·¥Ö O·¥ú·¥õ</b> A ü ü T ú·¥á <b>B·¥è·¥õ</b>'s <b>C·¥è·¥ç·¥ç·¥Ä·¥ç·¥Ös</b> A…¥·¥Ö H·¥è·¥° T ú·¥á è <b>W·¥è Ä·¥ã</b> B è C ü…™·¥Ñ·¥ã…™…¥…¢ O…¥ T ú·¥á ¬ª üìö <b>C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös</b> B·¥ú·¥õ·¥õ·¥è…¥!""",
        reply_markup=InlineKeyboardMarkup(
             [ 
                [
                    InlineKeyboardButton(
                        "‚ûï S·¥ú·¥ç·¥ç·¥è…¥ M·¥á ‚ûï", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
                ],[
                    InlineKeyboardButton(
                         "üìö C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="cbcmds"
                    ),
                    InlineKeyboardButton(
                        "‚ù§Ô∏è D·¥è…¥·¥Ä·¥õ·¥á", url=f"https://t.me/{OWNER_USERNAME}")
                ],[
                    InlineKeyboardButton(
                        "üë• O“ì“ì…™·¥Ñ…™·¥Ä ü G Ä·¥è·¥ú·¥ò", url=f"https://t.me/{GROUP_SUPPORT}"
                    ),
                    InlineKeyboardButton(
                        "üì£ O“ì“ì…™·¥Ñ…™·¥Ä ü C ú·¥Ä…¥…¥·¥á ü", url=f"https://t.me/{UPDATES_CHANNEL}")
                ],[
                    InlineKeyboardButton(
                        "‚ùóÔ∏è I…¥“ì·¥è & A ô·¥è·¥ú·¥õ üë®‚Äçüíª", callback_data="cbinfo")
                ],[
                    InlineKeyboardButton(
                        "üß™ S·¥è·¥ú Ä·¥Ñ·¥á C·¥è·¥Ö·¥á üß™", url="https://t.me/Sanki_BOTs"
                    )
                ]
            ]
        ),
     disable_web_page_preview=True
    )


@Client.on_callback_query(filters.regex("cbhelp"))
async def cbhelp(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üí° P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á ü ü·¥è T ú·¥á Ä·¥á, W·¥á ü·¥Ñ·¥è·¥ç·¥á T·¥è T ú·¥á H·¥á ü·¥ò M·¥á…¥·¥ú!</b>

**I…¥ T ú…™s M·¥á…¥·¥ú Y·¥è·¥ú C·¥Ä…¥ O·¥ò·¥á…¥ S·¥á·¥†·¥á Ä·¥Ä ü A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö M·¥á…¥·¥ú, I…¥ E·¥Ä·¥Ñ ú C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö M·¥á…¥·¥ú T ú·¥á Ä·¥á Is A üs·¥è A B Ä…™·¥á“ì Ex·¥ò ü·¥Ä…¥·¥Ä·¥õ…™·¥è…¥ O“ì E·¥Ä·¥Ñ ú C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö**""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìö B·¥Äs…™·¥Ñ C·¥ç·¥Ö", callback_data="cbbasic"
                    ),
                    InlineKeyboardButton(
                        "üìï A·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö C·¥ç·¥Ö", callback_data="cbadvanced"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üìò A·¥Ö·¥ç…™…¥ C·¥ç·¥Ö", callback_data="cbadmin"
                    ),
                    InlineKeyboardButton(
                        "üìó S·¥ú·¥Ö·¥è C·¥ç·¥Ö", callback_data="cbsudo"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üìô O·¥°…¥·¥á Ä C·¥ç·¥Ö", callback_data="cbowner"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üìî F·¥ú…¥ C·¥ç·¥Ö", callback_data="cbfun"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã T·¥è H·¥è·¥ç·¥á", callback_data="cbstart"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbbasic"))
async def cbbasic(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á Ä·¥á Is T ú·¥á B·¥Äs…™·¥Ñ C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös</b>

üéß [ …¢ Ä·¥è·¥ú·¥ò ·¥†·¥Ñ ·¥Ñ·¥ç·¥Ö ]

/play (s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á) - ·¥ò ü·¥Ä è s·¥è…¥…¢ “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á
/ytplay (s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á) - ·¥ò ü·¥Ä è s·¥è…¥…¢ ·¥Ö…™ Ä·¥á·¥Ñ·¥õ ü è “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á
/audio ( Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä·¥ú·¥Ö…™·¥è) - ·¥ò ü·¥Ä è s·¥è…¥…¢ ·¥ús…™…¥…¢ ·¥Ä·¥ú·¥Ö…™·¥è “ì…™ ü·¥á
/playlist - s ú·¥è·¥° ·¥õ ú·¥á  ü…™s·¥õ s·¥è…¥…¢ …™…¥ «´·¥ú·¥á·¥ú·¥á
/song (s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á) - ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö s·¥è…¥…¢ “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á
/search (·¥†…™·¥Ö·¥á·¥è …¥·¥Ä·¥ç·¥á)¬†- s·¥á·¥Ä Ä·¥Ñ ú ·¥†…™·¥Ö·¥á·¥è “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö
/vsong (·¥†…™·¥Ö·¥á·¥è …¥·¥Ä·¥ç·¥á)¬†- ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥†…™·¥Ö·¥á·¥è “ì Ä·¥è·¥ç  è·¥è·¥ú·¥õ·¥ú ô·¥á ·¥Ö·¥á·¥õ·¥Ä…™ ü·¥á·¥Ö
/lyric - (s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á)  ü è Ä…™·¥Ñs s·¥Ñ Ä·¥Ä·¥ò·¥ò·¥á Ä
/vk (s·¥è…¥…¢ …¥·¥Ä·¥ç·¥á) - ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö s·¥è…¥…¢ “ì Ä·¥è·¥ç …™…¥ ü…™…¥·¥á ·¥ç·¥è·¥Ö·¥á

üéß [ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥†·¥Ñ ·¥Ñ·¥ç·¥Ö ]

/cplay - s·¥õ Ä·¥á·¥Ä·¥ç ·¥ç·¥ús…™·¥Ñ ·¥è…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ
/cplayer - s ú·¥è·¥° ·¥õ ú·¥á s·¥è…¥…¢ …™…¥ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢
/cpause - ·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥ç·¥ús…™·¥Ñ
/cresume -  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥°·¥Äs ·¥ò·¥Ä·¥ús·¥á·¥Ö
/cskip - s·¥ã…™·¥ò s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥õ·¥è ·¥õ ú·¥á …¥·¥áx·¥õ s·¥è…¥…¢
/cend - ·¥á…¥·¥Ö ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢ ·¥ç·¥ús…™·¥Ñ
/admincache -  Ä·¥á“ì Ä·¥ás ú ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä·¥Ñ ú·¥á
/ubjoinc - …™…¥·¥†…™·¥õ·¥á ·¥õ ú·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ “ì·¥è Ä ·¥ä·¥è…™…¥ ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbadvanced"))
async def cbadvanced(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á Ä·¥á Is T ú·¥á A·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös</b>

/start (…™…¥ …¢ Ä·¥è·¥ú·¥ò) - s·¥á·¥á ·¥õ ú·¥á  ô·¥è·¥õ ·¥Ä ü…™·¥†·¥á s·¥õ·¥Ä·¥õ·¥ús
/reload -  Ä·¥á ü·¥è·¥Ä·¥Ö  ô·¥è·¥õ ·¥Ä…¥·¥Ö  Ä·¥á“ì Ä·¥ás ú ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥  ü…™s·¥õ
/cache -  Ä·¥á“ì Ä·¥ás ú ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä·¥Ñ ú·¥á
/ping - ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥è·¥õ ·¥ò…™…¥…¢ s·¥õ·¥Ä·¥õ·¥ús
/uptime - ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥è·¥õ ·¥ú·¥ò·¥õ…™·¥ç·¥á s·¥õ·¥Ä·¥õ·¥ús""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbadmin"))
async def cbadmin(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á Ä·¥á Is T ú·¥á A·¥Ö·¥ç…™…¥ C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös</b>

/player - s ú·¥è·¥° ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è…™…¥…¢ s·¥õ·¥Ä·¥õ·¥ús
/pause - ·¥ò·¥Ä·¥ús·¥á ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢
/resume -  Ä·¥ás·¥ú·¥ç·¥á ·¥õ ú·¥á ·¥ç·¥ús…™·¥Ñ ·¥°·¥Äs ·¥ò·¥Ä·¥ús·¥á·¥Ö
/skip - s·¥ã…™·¥ò ·¥õ·¥è ·¥õ ú·¥á …¥·¥áx·¥õ s·¥è…¥…¢
/end - s·¥õ·¥è·¥ò ·¥ç·¥ús…™·¥Ñ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢
/userbotjoin - …™…¥·¥†…™·¥õ·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥ä·¥è…™…¥ ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò
/auth - ·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö ·¥ús·¥á Ä “ì·¥è Ä ·¥ús…™…¥…¢ ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ
/deauth - ·¥ú…¥·¥Ä·¥ú·¥õ ú·¥è Ä…™·¥¢·¥á·¥Ö “ì·¥è Ä ·¥ús…™…¥…¢ ·¥ç·¥ús…™·¥Ñ  ô·¥è·¥õ
/control - ·¥è·¥ò·¥á…¥ ·¥õ ú·¥á ·¥ò ü·¥Ä è·¥á Ä s·¥á·¥õ·¥õ…™…¥…¢s ·¥ò·¥Ä…¥·¥á ü
/delcmd (on | off) - enable / disable del ·¥Ñ·¥ç·¥Ö “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á del ·¥Ñ·¥ç·¥Ö “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á
/musicplayer (on / off) - disable / enable ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò
/b and /tb (ban / temporary ban) -  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ ü è ·¥è Ä ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä…™ ü è  ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä …™…¥ …¢ Ä·¥è·¥ú·¥ò
/ub - ·¥õ·¥è ·¥ú…¥ ô·¥Ä…¥…¥·¥á·¥Ö ·¥ús·¥á Ä  è·¥è·¥ú' Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç …¢ Ä·¥è·¥ú·¥ò
/m and /tm (mute / temporary mute) - ·¥ç·¥ú·¥õ·¥á ·¥ò·¥á Ä·¥ç·¥Ä…¥·¥á…¥·¥õ ü è ·¥è Ä ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä…™ ü è ·¥ç·¥ú·¥õ·¥á·¥Ö ·¥ús·¥á Ä …™…¥ …¢ Ä·¥è·¥ú·¥ò
/um - ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥ús·¥á Ä  è·¥è·¥ú' Ä·¥á ·¥ç·¥ú·¥õ·¥á·¥Ö …™…¥ …¢ Ä·¥è·¥ú·¥ò""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbsudo"))
async def cbsudo(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á Ä·¥á Is T ú·¥á S·¥ú·¥Ö·¥è C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös</b>

/userbotleaveall - ·¥è Ä·¥Ö·¥á Ä ·¥õ ú·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ ·¥õ·¥è  ü·¥á·¥Ä·¥†·¥á “ì Ä·¥è·¥ç ·¥Ä ü ü …¢ Ä·¥è·¥ú·¥ò
/gcast - s·¥á…¥·¥Ö ·¥Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ Ä·¥è·¥ú…¢ ú·¥õ ·¥õ ú·¥á ·¥Äss…™s·¥õ·¥Ä…¥·¥õ
/stats - s ú·¥è·¥° ·¥õ ú·¥á  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñ
/rmd -  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ü ü ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á·¥Ö “ì…™ ü·¥ás
/clean -  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä ü ü  Ä·¥Ä·¥° “ì…™ ü·¥ás""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbowner"))
async def cbowner(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á Ä·¥á Is T ú·¥á O·¥°…¥·¥á Ä C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös</b>

/stats - s ú·¥è·¥° ·¥õ ú·¥á  ô·¥è·¥õ s·¥õ·¥Ä·¥õ…™s·¥õ…™·¥Ñ
/broadcast - s·¥á…¥·¥Ö ·¥Ä  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ ·¥ç·¥áss·¥Ä…¢·¥á “ì Ä·¥è·¥ç  ô·¥è·¥õ
/block (·¥ús·¥á Ä …™·¥Ö - ·¥Ö·¥ú Ä·¥Ä·¥õ…™·¥è…¥ -  Ä·¥á·¥Äs·¥è…¥) -  ô ü·¥è·¥Ñ·¥ã ·¥ús·¥á Ä “ì·¥è Ä ·¥ús…™…¥…¢  è·¥è·¥ú Ä  ô·¥è·¥õ
/unblock (·¥ús·¥á Ä …™·¥Ö -  Ä·¥á·¥Äs·¥è…¥) - ·¥ú…¥ ô ü·¥è·¥Ñ·¥ã ·¥ús·¥á Ä  è·¥è·¥ú  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö “ì·¥è Ä ·¥ús…™…¥…¢  è·¥è·¥ú Ä  ô·¥è·¥õ
/blocklist - s ú·¥è·¥°  è·¥è·¥ú ·¥õ ú·¥á  ü…™s·¥õ ·¥è“ì ·¥ús·¥á Ä ·¥°·¥Äs  ô ü·¥è·¥Ñ·¥ã·¥á·¥Ö “ì·¥è Ä ·¥ús…™…¥…¢  è·¥è·¥ú Ä  ô·¥è·¥õ

üìù …¥·¥è·¥õ·¥á: ·¥Ä ü ü ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥è·¥°…¥·¥á·¥Ö  ô è ·¥õ ú…™s  ô·¥è·¥õ ·¥Ñ·¥Ä…¥  ô·¥á ·¥áx·¥á·¥Ñ·¥ú·¥õ·¥á·¥Ö  ô è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä ·¥è“ì ·¥õ ú·¥á  ô·¥è·¥õ ·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥Ä…¥ è ·¥áx·¥Ñ·¥á·¥ò·¥õ…™·¥è…¥s.""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbfun"))
async def cbfun(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üèÆ P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á Ä·¥á Is T ú·¥á F·¥ú…¥ C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös</b>

/chika - ·¥Ñ ú·¥á·¥Ñ·¥ã …™·¥õ  ô è  è·¥è·¥ú Äs·¥á ü“ì
/wibu - ·¥Ñ ú·¥á·¥Ñ·¥ã …™·¥õ  ô è  è·¥è·¥ú Äs·¥á ü“ì
/asupan - ·¥Ñ ú·¥á·¥Ñ·¥ã …™·¥õ  ô è  è·¥è·¥ú Äs·¥á ü“ì
/truth - ·¥Ñ ú·¥á·¥Ñ·¥ã …™·¥õ  ô è  è·¥è·¥ú Äs·¥á ü“ì
/dare - ·¥Ñ ú·¥á·¥Ñ·¥ã …™·¥õ  ô è  è·¥è·¥ú Äs·¥á ü“ì""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã", callback_data="cbhelp"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbguide"))
async def cbguide(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""‚ùì H·¥è·¥° T·¥è Us·¥á T ú…™s B·¥è·¥õ :

1.) F…™ Äs·¥õ, A·¥Ö·¥Ö M·¥á T·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò.
2.) T ú·¥á…¥ P Ä·¥è·¥ç·¥è·¥õ·¥á M·¥á As A·¥Ö·¥ç…™…¥ A…¥·¥Ö G…™·¥†·¥á A ü ü P·¥á Ä·¥ç…™ss…™·¥è…¥s Ex·¥Ñ·¥á·¥ò·¥õ A…¥·¥è…¥ è·¥ç·¥è·¥ús A·¥Ö·¥ç…™…¥.
3.) A·¥Ö·¥Ö @{ASSISTANT_NAME} T·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò O Ä T è·¥ò·¥á /userbotjoin T·¥è I…¥·¥†…™·¥õ·¥á H·¥á Ä.
4.) T·¥ú Ä…¥ O…¥ T ú·¥á V·¥è…™·¥Ñ·¥á C ú·¥Ä·¥õ F…™ Äs·¥õ B·¥á“ì·¥è Ä·¥á S·¥õ·¥Ä Ä·¥õ T·¥è P ü·¥Ä è M·¥ús…™·¥Ñ.""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìö C·¥è·¥ç·¥ç·¥Ä·¥ç·¥Ö L…™s·¥õ", callback_data="cbhelp"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üóë C ü·¥ès·¥á", callback_data="close"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("close"))
async def close(_, query: CallbackQuery):
    await query.message.delete()


@Client.on_callback_query(filters.regex("cbback"))
@cb_admin_check
async def cbback(_, query: CallbackQuery):
    await query.edit_message_text(
        "**üí° P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á Ä·¥á Is T ú·¥á C·¥è…¥·¥õ Ä·¥è ü M·¥á…¥·¥ú O“ì B·¥è·¥õ :**",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "‚è∏ P·¥Ä·¥ús·¥á", callback_data="cbpause"
                    ),
                    InlineKeyboardButton(
                        "‚ñ∂Ô∏è R·¥ás·¥ú·¥ç·¥á", callback_data="cbresume"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚è© S·¥ã…™·¥ò", callback_data="cbskip"
                    ),
                    InlineKeyboardButton(
                        "‚èπ E…¥·¥Ö", callback_data="cbend"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚õî A…¥·¥õ…™ C·¥ç·¥Ö", callback_data="cbdelcmds"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üõÑ G Ä·¥è·¥ú·¥ò T·¥è·¥è üs", callback_data="cbgtools"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üóë C ü·¥ès·¥á", callback_data="close"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbgtools"))
@cb_admin_check
@authorized_users_only
async def cbgtools(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, T ú…™s Is T ú·¥á F·¥á·¥Ä·¥õ·¥ú Ä·¥á I…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ :</b>

üí° **“ì·¥á·¥Ä·¥õ·¥ú Ä·¥á :** ·¥õ ú…™s “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á ·¥Ñ·¥è…¥·¥õ·¥Ä…™…¥s “ì·¥ú…¥·¥Ñ·¥õ…™·¥è…¥s ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥  ô·¥Ä…¥, ·¥ç·¥ú·¥õ·¥á, ·¥ú…¥ ô·¥Ä…¥, ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥ús·¥á Äs …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.

·¥Ä…¥·¥Ö  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è s·¥á·¥õ ·¥Ä ·¥õ…™·¥ç·¥á “ì·¥è Ä ·¥õ ú·¥á  ô·¥Ä…¥ ·¥Ä…¥·¥Ö ·¥ç·¥ú·¥õ·¥á ·¥ò·¥á…¥·¥Ä ü·¥õ…™·¥ás “ì·¥è Ä ·¥ç·¥á·¥ç ô·¥á Äs …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò s·¥è ·¥õ ú·¥Ä·¥õ ·¥õ ú·¥á è ·¥Ñ·¥Ä…¥  ô·¥á  Ä·¥á ü·¥á·¥Äs·¥á·¥Ö “ì Ä·¥è·¥ç ·¥õ ú·¥á ·¥ò·¥ú…¥…™s ú·¥ç·¥á…¥·¥õ ·¥°…™·¥õ ú ·¥õ ú·¥á s·¥ò·¥á·¥Ñ…™“ì…™·¥á·¥Ö ·¥õ…™·¥ç·¥á.

‚ùî **·¥ús·¥Ä…¢·¥á :**

1Ô∏è‚É£  ô·¥Ä…¥ & ·¥õ·¥á·¥ç·¥ò·¥è Ä·¥Ä Ä…™ ü è  ô·¥Ä…¥ ·¥ús·¥á Ä “ì Ä·¥è·¥ç  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò :
   ¬ª type `/b username/reply to message` ban permanently
   ¬ª type `/tb username/reply to message/duration` temporarily ban user
   ¬ª type `/ub username/reply to message` to unban user

2Ô∏è‚É£ mute & temporarily mute user in your group:
   ¬ª type `/m username/reply to message` mute permanently
   ¬ª type `/tm username/reply to message/duration` temporarily mute user
   ¬ª type `/um username/reply to message` to unmute user

üìù note: cmd /b, /tb and /ub is the function to banned/unbanned user from your group, whereas /m, /tm and /um are commands to mute/unmute user in your group.""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° G·¥è B·¥Ä·¥Ñ·¥ã", callback_data="cbback"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbdelcmds"))
@cb_admin_check
@authorized_users_only
async def cbdelcmds(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, T ú…™s Is T ú·¥á F·¥á·¥Ä·¥õ·¥ú Ä·¥á I…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ :</b>
        
**üí° “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á:** ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥á·¥†·¥á Ä è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös s·¥á…¥·¥õ  ô è ·¥ús·¥á Äs ·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö s·¥ò·¥Ä·¥ç …™…¥ …¢ Ä·¥è·¥ú·¥òs !

‚ùî ·¥ús·¥Ä…¢·¥á:**

 1Ô∏è‚É£ ·¥õ·¥è ·¥õ·¥ú Ä…¥ ·¥è…¥ “ì·¥á·¥Ä·¥õ·¥ú Ä·¥á:
     ¬ª type `/delcmd on`
    
 2Ô∏è‚É£ to turn off feature:
     ¬ª type `/delcmd off`""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° G·¥è B·¥Ä·¥Ñ·¥ã", callback_data="cbback"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbcmds"))
async def cbhelps(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""<b>üí° P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á ü ü·¥è T ú·¥á Ä·¥á, W·¥á ü·¥Ñ·¥è·¥ç·¥á T·¥è T ú·¥á H·¥á ü·¥ò M·¥á…¥·¥ú!</b>

**in this menu you can open several available command menus, in each command menu there is also a brief explanation of each command**""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üìö B·¥Äs…™·¥Ñ C·¥ç·¥Ö", callback_data="cbbasic"
                    ),
                    InlineKeyboardButton(
                        "üìï A·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö C·¥ç·¥Ö", callback_data="cbadvanced"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üìò A·¥Ö·¥ç…™…¥ C·¥ç·¥Ö", callback_data="cbadmin"
                    ),
                    InlineKeyboardButton(
                        "üìó S·¥ú·¥Ö·¥è C·¥ç·¥Ö", callback_data="cbsudo"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üìô O·¥°…¥·¥á Ä C·¥ç·¥Ö", callback_data="cbowner"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üìî F·¥ú…¥ C·¥ç·¥Ö", callback_data="cbfun"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã T·¥è H·¥è·¥ç·¥á", callback_data="cbstart"
                    )
                ]
            ]
        )
    )


@Client.on_callback_query(filters.regex("cbhowtouse"))
async def cbguides(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""‚ùì H·¥è·¥° T·¥è Us·¥á T ú…™s B·¥è·¥õ:

1.) “ì…™ Äs·¥õ, ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò.
2.) ·¥õ ú·¥á…¥ ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥ç·¥á ·¥Äs ·¥Ä·¥Ö·¥ç…™…¥ ·¥Ä…¥·¥Ö …¢…™·¥†·¥á ·¥Ä ü ü ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s ·¥áx·¥Ñ·¥á·¥ò·¥õ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥.
3.) ·¥Ä·¥Ö·¥Ö @{ASISTANT_NAME} ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥è Ä ·¥õ è·¥ò·¥á /userbotjoin ·¥õ·¥è …™…¥·¥†…™·¥õ·¥á  ú·¥á Ä.
4.) ·¥õ·¥ú Ä…¥ ·¥è…¥ ·¥õ ú·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ “ì…™ Äs·¥õ  ô·¥á“ì·¥è Ä·¥á s·¥õ·¥Ä Ä·¥õ ·¥õ·¥è ·¥ò ü·¥Ä è ·¥ç·¥ús…™·¥Ñ.""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã T·¥è H·¥è·¥ç·¥á", callback_data="cbinfo"
                    )
                ]
            ]
        )
    )

@Client.on_callback_query(filters.regex("cbinfo"))
async def cbinfo(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**üë©‚Äçüíª …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥** \n\n`ü§ñ ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è ·¥ò è·¥õ…¢·¥Ñ·¥Ä ü üs ·¥õ ú·¥á ·¥Äs è…¥·¥Ñ ·¥Ñ ü…™·¥á…¥·¥õ ·¥Ä·¥ò…™ “ì·¥è Ä ·¥õ ú·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç …¢ Ä·¥è·¥ú·¥ò ·¥Ñ·¥Ä ü üs.` \n\n**·¥õ ú…™s  ô·¥è·¥õ  ü…™·¥Ñ·¥á…¥s·¥á·¥Ö ·¥ú…¥·¥Ö·¥á Ä …¢…¥·¥ú-…¢·¥ò ü 3.0  ü…™·¥Ñ·¥á…¥s·¥á.**""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "‚ùì H·¥è·¥° T·¥è Us·¥á M·¥á", callback_data="cbhowtouse"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üßë‚ÄçüíªD·¥á·¥†s", callback_data="cbdevs"
                    ),
                     InlineKeyboardButton(
                        "‚ùì C·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="cbcmds"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã T·¥è H·¥è·¥ç·¥á", callback_data="cbstart"
                    )
                ]
            ]
        )
    )

@Client.on_callback_query(filters.regex("cbdevs"))
async def cbdevs(_, query: CallbackQuery):
    await query.edit_message_text(
        f"""**·¥Ñ Ä·¥á·¥Ö…™·¥õ ·¥†·¥Ñ ·¥ç·¥ús…™·¥Ñ ·¥ò ü·¥Ä è·¥á Ä** \n\n` ú·¥á Ä·¥á s·¥è·¥ç·¥á ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Äs  ú·¥á ü·¥ò…™…¥…¢ …™…¥ ·¥ç·¥Ä·¥ã…™…¥…¢ ·¥õ ú·¥á` **·¥ò…™·¥ã·¥Ä·¥Ñ ú·¥ú ‚Ä¢ ·¥ç·¥ús…™·¥Ñ**.""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "N…™·¥õ Ä…™·¥Ñ (O·¥°…¥·¥á Ä)", url=f"https://t.me/iTs_Nitric"
                    ),
                     InlineKeyboardButton(
                        "V…™·¥Ñ·¥ãs", url=f"https://t.me/viichitrapraani"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "H·¥áx·¥è Ä", url=f"https://t.me/iTs_Hexor"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üè° B·¥Ä·¥Ñ·¥ã T·¥è H·¥è·¥ç·¥á", callback_data="cbinfo"
                    )
                ]
            ]
        )
    )


