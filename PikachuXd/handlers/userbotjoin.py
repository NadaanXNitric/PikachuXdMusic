import asyncio
from pyrogram import Client, filters
from pyrogram.errors import UserAlreadyParticipant
from PikachuXd.helpers.filters import command
from PikachuXd.helpers.decorators import authorized_users_only, errors
from PikachuXd.callsmusic.callsmusic import client as USER
from PikachuXd.config import BOT_USERNAME, SUDO_USERS


@Client.on_message(command(["userbotjoin", f"userbotjoin@{BOT_USERNAME}"]) & ~filters.private & ~filters.bot)
@authorized_users_only
@errors
async def addchannel(client, message):
    chid = message.chat.id
    try:
        invitelink = await client.export_chat_invite_link(chid)
    except:
        await message.reply_text(
            "<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, M·¥Ä·¥ã·¥á M·¥á As A·¥Ö·¥ç…™…¥ F…™ Äs·¥õ.</b>",
        )
        return

    try:
        user = await USER.get_me()
    except:
        user.first_name = "helper"

    try:
        await USER.join_chat(invitelink)
        await USER.send_message(message.chat.id, "ü§ñ: i'm joined here for playing music on voice chat")
    except UserAlreadyParticipant:
        await message.reply_text(
            "<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á ü·¥ò·¥á Ä A ü Ä·¥á·¥Ä·¥Ö è I…¥ Y·¥è·¥ú Ä C ú·¥Ä·¥õ.</b>",
        )
    except Exception as e:
        print(e)
        await message.reply_text(
            f"<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ‚õë F ü·¥è·¥è·¥Ö W·¥Ä…™·¥õ E Ä Ä·¥è Ä ‚õë\n@PikachuXdAssistant C·¥è·¥ú ü·¥Ö…¥'·¥õ J·¥è…™…¥ Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò D·¥ú·¥á T·¥è M·¥Ä…¥ è J·¥è…™…¥ R·¥á«´·¥ú·¥ás·¥õs F·¥è Ä Us·¥á Ä ô·¥è·¥õ! M·¥Ä·¥ã·¥á S·¥ú Ä·¥á T ú·¥á Us·¥á Ä Is N·¥è·¥õ B·¥Ä…¥…¥·¥á·¥Ö I…¥ T ú·¥á G Ä·¥è·¥ú·¥ò."
            "\n\nO Ä A·¥Ö·¥Ö @PikachuXdAssistant M·¥Ä…¥·¥ú·¥Ä ü ü è T·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò A…¥·¥Ö T Ä è A…¢·¥Ä…™…¥.</b>",
        )
        return
    await message.reply_text(
        "<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á ü·¥ò·¥á Ä Us·¥á Ä ô·¥è·¥õ J·¥è…™…¥·¥á·¥Ö Y·¥è·¥ú Ä C ú·¥Ä·¥õ.</b>",
    )


@Client.on_message(command(["userbotleave", f"userbotleave@{BOT_USERNAME}"]) & filters.group & ~filters.edited)
@authorized_users_only
async def rem(client, message):
    try:
        await USER.leave_chat(message.chat.id)
    except:
        await message.reply_text(
            f"<b>Us·¥á Ä C·¥è·¥ú ü·¥Ö…¥'·¥õ L·¥á·¥Ä·¥†·¥á Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò! M·¥Ä è B·¥á F ü·¥è·¥è·¥Ö·¥°·¥Ä…™·¥õs."
            "\n\nO Ä M·¥Ä…¥·¥ú·¥Ä ü ü è K…™·¥Ñ·¥ã M·¥á F Ä·¥è·¥ç T·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò.</b>",
        )
        return
    
@Client.on_message(command(["userbotleaveall", f"userbotleaveall@{BOT_USERNAME}"]))
async def bye(client, message):
    if message.from_user.id in SUDO_USERS:
        left=0
        failed=0
        lol = await message.reply("P…™·¥ã·¥Ä P…™·¥ã·¥Ä, Ass…™s·¥õ·¥Ä…¥·¥õ L·¥á·¥Ä·¥†…™…¥…¢ A ü ü C ú·¥Ä·¥õs.")
        async for dialog in USER.iter_dialogs():
            try:
                await USER.leave_chat(dialog.chat.id)
                left = left+1
                await lol.edit(f"P…™·¥ã·¥Ä P…™·¥ã·¥Ä, Ass…™s·¥õ·¥Ä…¥·¥õ L·¥á·¥Ä·¥†…™…¥…¢... L·¥á“ì·¥õ : {left} C ú·¥Ä·¥õs. F·¥Ä…™ ü·¥á·¥Ö : {failed} C ú·¥Ä·¥õs.")
            except:
                failed=failed+1
                await lol.edit(f"P…™·¥ã·¥Ä P…™·¥ã·¥Ä, Ass…™s·¥õ·¥Ä…¥·¥õ L·¥á·¥Ä·¥†…™…¥…¢... L·¥á“ì·¥õ : {left} C ú·¥Ä·¥õs. F·¥Ä…™ ü·¥á·¥Ö : {failed} C ú·¥Ä·¥õs.")
            await asyncio.sleep(0.7)
        await client.send_message(message.chat.id, f"L·¥á“ì·¥õ  {left} C ú·¥Ä·¥õs. F·¥Ä…™ ü·¥á·¥Ö : {failed} C ú·¥Ä·¥õs.")


@Client.on_message(command(["userbotjoinchannel", "ubjoinc"]) & ~filters.private & ~filters.bot)
@authorized_users_only
@errors
async def addcchannel(client, message):
    try:
      conchat = await client.get_chat(message.chat.id)
      conid = conchat.linked_chat.id
      chid = conid
    except:
      await message.reply("is the chat even linked ?")
      return    
    chat_id = chid
    try:
        invitelink = await client.export_chat_invite_link(chid)
    except:
        await message.reply_text(
            "<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, M·¥Ä·¥ã·¥á M·¥á As A·¥Ö·¥ç…™…¥ F…™ Äs·¥õ.</b>",
        )
        return

    try:
        user = await USER.get_me()
    except:
        user.first_name = "helper"

    try:
        await USER.join_chat(invitelink)
        await USER.send_message(message.chat.id, "ü§ñ: i joined here as you requested")
    except UserAlreadyParticipant:
        await message.reply_text(
            "<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á ü·¥ò·¥á Ä A ü Ä·¥á·¥Ä·¥Ö è I…¥ Y·¥è·¥ú Ä C ú·¥Ä·¥õ.</b>",
        )
        return
    except Exception as e:
        print(e)
        await message.reply_text(
            f"<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, ‚õë F ü·¥è·¥è·¥Ö W·¥Ä…™·¥õ E Ä Ä·¥è Ä ‚õë\n@PikachuXdAssistant C·¥è·¥ú ü·¥Ö…¥'·¥õ J·¥è…™…¥ Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò D·¥ú·¥á T·¥è M·¥Ä…¥ è J·¥è…™…¥ R·¥á«´·¥ú·¥ás·¥õs F·¥è Ä Us·¥á Ä ô·¥è·¥õ! M·¥Ä·¥ã·¥á S·¥ú Ä·¥á T ú·¥á Us·¥á Ä Is N·¥è·¥õ B·¥Ä…¥…¥·¥á·¥Ö I…¥ T ú·¥á G Ä·¥è·¥ú·¥ò."
            "\n\nO Ä A·¥Ö·¥Ö @PikachuXdAssistant M·¥Ä…¥·¥ú·¥Ä ü ü è T·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò A…¥·¥Ö T Ä è A…¢·¥Ä…™…¥.</b>",
        )
        return
    await message.reply_text(
        "<b>P…™·¥ã·¥Ä P…™·¥ã·¥Ä, H·¥á ü·¥ò·¥á Ä Us·¥á Ä ô·¥è·¥õ J·¥è…™…¥·¥á·¥Ö Y·¥è·¥ú Ä C ú·¥Ä·¥õ.</b>",
    )
